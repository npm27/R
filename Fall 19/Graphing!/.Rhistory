pairwise.t.test(nomiss$Jol, nomiss$Direction, ##significant difference between Unrelated pairs and related pairs
paired = F, p.adjust.method = 'none')
##Recall
pairwise.t.test(nomiss$Recall, nomiss$Direction, ##all are significant
paired = F, p.adjust.method = 'none')
##get t values for post hocs
source("pairwise_t.R")
Jol.t = pairwise.t.test.with.t.and.df(nomiss$Jol, nomiss$Direction,
paired = F, p.adjust.method = 'none')
Jol.t
print(Jol.t)[[5]] #T-values
print(Jol.t)[[6]] #df
R.t = pairwise.t.test.with.t.and.df(nomiss$Recall, nomiss$Direction,
paired = F, p.adjust.method = 'none')
R.t
print(R.t)[[5]] #T-values
print(R.t)[[6]] #df
model1
model2
meanJol = tapply(nomiss$Jol, nomiss$Direction, mean)
meanR = tapply(nomiss$Recall, nomiss$Direction, mean)
meanJol
sdJol
meanR = tapply(nomiss$Recall, nomiss$Direction, mean)
sdR = tapply(nomiss$Recall, nomiss$Direction, sd, na.rm = T)
sdR
meanR
nJol = tapply(nomiss$Jol, nomiss$Direction, length)
nR = tapply(nomiss$Recall, nomiss$Direction, length)
meanR;sdR;nR
jfb = d.dep.t.avg(68.20625, 66.08839, 28.41285, 28.81500, 1120, a = .05) #d = .07
jfb.d = round(jfb$d, digits = 2)
jfb.d
print(R.t)[[5]] #T-values
pairwise.t.test(nomiss$Jol, nomiss$Direction, ##significant difference between Unrelated pairs and related pairs
paired = F, p.adjust.method = 'Bonferroni')
pairwise.t.test(nomiss$Jol, nomiss$Direction, ##significant difference between Unrelated pairs and related pairs
paired = F, p.adjust.method = 'bonferroni')
pairwise.t.test(nomiss$Recall, nomiss$Direction, ##all are significant
paired = F, p.adjust.method = 'bonferroni')
Jol.t = pairwise.t.test.with.t.and.df(nomiss$Jol, nomiss$Direction,
paired = F, p.adjust.method = 'bonferroni')
R.t = pairwise.t.test.with.t.and.df(nomiss$Recall, nomiss$Direction,
paired = F, p.adjust.method = 'bonferroni')
print(Jol.t)[[5]] #T-values
print(R.t)[[5]] #T-values
rfs = d.dep.t.avg(67.40741, 58.83929, 46.89169, 49.23445, 1120, a = .05) #d = 0.18
rfs.d = round(rfs$d, digits = 2)
rfs.d
model9 = aov(int.dat$diff ~ (int.dat$jol_bin*int.dat$direction))
nomiss.f = subset(nomiss,
nomiss$Direction == "F")
nomiss.b = subset(nomiss,
nomiss$Direction == "B")
nomiss.s = subset(nomiss,
nomiss$Direction == "S")
nomiss.u = subset(nomiss,
nomiss$Direction == "U")
##get rounded jols
nomiss.f$jol_bin = round(nomiss.f$Jol, -1)
nomiss.b$jol_bin = round(nomiss.b$Jol, -1)
nomiss.s$jol_bin = round(nomiss.s$Jol, -1)
nomiss.u$jol_bin = round(nomiss.u$Jol, -1)
##put data in wide format
##jol
f.jol = cast(nomiss.f, Subject ~ block, mean, value = 'Jol')
f.jol$mean_JOL = apply(f.jol, 1, mean)
f.jol$jol_bin = round(f.jol$mean_JOL, -1)
b.jol = cast(nomiss.b, Subject ~ block, mean, value = 'Jol')
b.jol$mean_JOL = apply(b.jol, 1, mean)
b.jol$jol_bin = round(b.jol$mean_JOL, -1)
s.jol = cast(nomiss.s, Subject ~ block, mean, value = 'Jol')
s.jol$mean_JOL = apply(s.jol, 1, mean)
s.jol$jol_bin = round(s.jol$mean_JOL, -1)
u.jol = cast(nomiss.u, Subject ~ block, mean, value = 'Jol')
u.jol$mean_JOL = apply(u.jol, 1, mean)
u.jol$jol_bin = round(u.jol$mean_JOL, -1)
##recall
f.recall = cast(nomiss.f, Subject ~ block, mean, value = 'Recall')
f.recall$mean_recall = apply(f.recall, 1, mean)
b.recall = cast(nomiss.b, Subject ~ block, mean, value = 'Recall')
b.recall$mean_recall = apply(b.recall, 1, mean)
s.recall = cast(nomiss.s, Subject ~ block, mean, value = 'Recall')
s.recall$mean_recall = apply(s.recall, 1, mean)
u.recall = cast(nomiss.u, Subject ~ block, mean, value = 'Recall')
u.recall$mean_recall = apply(u.recall, 1, mean)
##add direction column
f.recall$direction = rep("f", 28)
f.jol$direction = rep("f", 28)
b.recall$direction = rep("b", 28)
b.jol$direction = rep("b", 28)
s.recall$direction = rep("s", 28)
s.jol$direction = rep("s", 28)
u.recall$direction = rep("u", 28)
u.jol$direction = rep("u", 28)
##Put everything back together
int.recall = rbind(f.recall, b.recall, s.recall, u.recall)
int.jol = rbind(f.jol, b.jol, s.jol, u.jol)
int.recall = int.recall[ , -c(2:3)]
int.jol = int.jol[ , -c(2:3)]
int.dat = cbind(int.jol, int.recall)
int.dat = int.dat[ , -c(4:5)]
##get difference score
int.dat$mean_recall = int.dat$mean_recall * 100
int.dat$diff = int.dat$jol_bin - int.dat$mean_recall
library(car)
model9 = aov(int.dat$diff ~ (int.dat$jol_bin*int.dat$direction))
summary(model9)
library(lsr)
etas1 = etaSquared(model9)
bar3 = ggplot(long.dat, aes(Direction, Score, fill = Task))
bar3 = bar3 +
stat_summary(fun.y = mean,
geom = "bar",
position = "dodge",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
position = position_dodge(width = 0.90),
width = 0.2,
color = "black") +
scale_fill_manual("Task",
values = c("Jol" = "white",
"Recall" = "dimgrey")) +
cleanup +
xlab("Direction") +
ylab("Mean Task Performance")
ylim(0,100)
#labs(title="All Blocks")
bar3
dat = read.csv("ex2 final output.csv")
summary(dat)
library(ggplot2)
library(reshape)
##put recall on correct scale
dat$Scored_Response = (dat$Scored_Response * 100)
##remove out of range scores
dat$Jol_Response[dat$Jol_Response > 100] = NA
##get sample size
summary(dat$Subject) #n = 34
summary(dat)
##remove missing
nomiss3 = na.omit(dat)
colnames(nomiss3)[6] = "Jol"
colnames(nomiss3)[9] = "Recall"
####make the graph####
##melt the data
long.dat = melt(nomiss3, id = c("Subject", "Block",
"ListNum", "Direction", "ExperimentName", "cue_target",
"recall_response", "cue_prompt"))
summary(long.dat)
colnames(long.dat)[9] = "Task"
colnames(long.dat)[10] = "Score"
bar3 = ggplot(long.dat, aes(Direction, Score, fill = Task))
bar3 = bar3 +
stat_summary(fun.y = mean,
geom = "bar",
position = "dodge",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
position = position_dodge(width = 0.90),
width = 0.2,
color = "black") +
scale_fill_manual("Task",
values = c("Jol" = "white",
"Recall" = "dimgrey")) +
cleanup +
xlab("Direction") +
ylab("Mean Task Performance")
ylim(0,100)
#labs(title="All Blocks")
bar3
bar3 = ggplot(long.dat, aes(Direction, Score, fill = Task))
bar3 = bar3 +
stat_summary(fun.y = mean,
geom = "bar",
position = "dodge",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
position = position_dodge(width = 0.90),
width = 0.2,
color = "black") +
scale_fill_manual("Task",
values = c("Jol" = "white",
"Recall" = "dimgrey")) +
cleanup +
xlab("Direction") +
ylab("Mean Task Performance") +
ylim(0,100)
#labs(title="All Blocks")
bar3
knitr::include_graphics("plot1.png")
citr:::insert_citation()
12.11*40
484.4*2
968.8*.15
968.8-145.32
823-110-50
85-22)
85-22
n = 100
dbinom(100)
dbinom(50, 100, 50)
dbinom(50, 100, 2)
dbinom(50, 100, .5)
dbinom(50, 100, .5)
round(data.frame(0:100, probs), digits = 5)
probs = dbinom(50, 100, .5)
round(data.frame(0:100, probs), digits = 5)
plot(0:100, probs, type="h", xlim=c(0,100), ylim=c(0,.1))
probs = dbinom(0:100, 100, .5) ##get the probability
round(data.frame(0:100, probs), digits = 5)
plot(0:100, probs, type="h", xlim=c(0,100), ylim=c(0,.1))
points(0:100, probs, pch=16, cex=.5)
curve(dnorm(x, mean=50, sd=5), from=0, to=100, xlim = c(0, 100), ylim = c(0, 0.5), xlab = "x", add=T, col="blue")
sum(dbinom(45:55, size=100, prob=1/2))
sum(dbinom(50, size=100, prob=1/2))
length(probs)
probs = as.data.frame(probs)
subset(probs, Mod(probs$probs) == 0)
View(probs)
head = 1
tail = 0
prob = e
e
e = exp(1)
sample(c("Heads", "Tails"), n, rep = T)
Flip1Coin = function(n) sample(c("Heads", "Tails"), n, rep = T)
Flip1Coin(n)
sample(c("Heads", "Tails"), n, rep = T)
sample(c("Heads", "Tails"), n, rep = 100)
Flip1Coin = function(n) sample(c("Heads", "Tails"), n, rep = 100)
Flip1Coin(n)
sample(c("Heads", "Tails"), n, rep = 100)
Flip1Coin = sample(c("Heads", "Tails"), n, rep = 100)
pbinom(50, 100, .5)
dbinom(50, 100, .5)
dnorm(50)
dnorm(50/sqrt(24))
pbinom(50, size = 100, .5)
pbinom(48, size = 100, .5)
pbinom(52, size = 100, .5)
pbinom(71, size = 100, .5)
m = 100 * .5
sd1 = sqrt(100 * .5 *.5)
1 - dnorm(50, mean = m, sd = sd1)
1 - pnorm(50, mean = m, sd = sd1)
x = c(0:100)
length(x)
mod(x, 2)
Mod(x)
Mod(x, 2)
setwd("~/GitHub/R/Fall 19/Graphing!")
install.packages("memisc")
####Let's learn how to graph things!####
##setup
library(memisc)
#we use memisc to read spss files
chickdata = as.data.set(spss.system.file("c4 ChickFlick.sav"))
#lets turn it into a dataframe so its actually useful
chickdata = as.data.frame(chickdata)
View(chickdata)
notfactor = rep(1:3, 50)
table(notfactor)
factored = factor(notfactor,
levels = c(1,2,3),
labels = c("swiss", "feta", "gouda"))
table(factored)
write.csv(chickdata, file = "chickdata.csv", row.names = F)
####reshaping data####
cricket = read.csv("c4 Jiminy Cricket.csv", header=TRUE)
summary(cricket)
colnames(cricket)[1] = "ID"
summary(cricket)
install.packages("reshape")
library(reshape)
View(cricket)
library(reshape)
View(cricket)
longcricket = melt(cricket,
id = c("ID", "Strategy"),
measured = c("Success_Pre", "Succcess_Post"))
summary(longcricket)
####graph start####
##remember if you already have this package you do not need to install it
install.packages("ggplot2")
library(ggplot2)
##create the blank plot
##notice for a histogram, AES only has ONE variable
crickethist = ggplot(cricket, aes(Success_Pre))
crickethist +
geom_histogram(binwidth = 1,
color = "black",
fill = "white") +
xlab("Success Pre Test") +
ylab("Frequency")
#now fill in the plot
crickethist +
geom_histogram(binwidth = 1,
color = "blue",
fill = "white") +
xlab("Success Pre Test") +
ylab("Frequency")
#now fill in the plot
crickethist +
geom_histogram(binwidth = 1,
color = "blue",
fill = "red") +
xlab("Success Pre Test") +
ylab("Frequency")
geom_histogram(binwidth = 5,
color = "blue",
fill = "red") +
xlab("Success Pre Test") +
ylab("Frequency")
crickethist = ggplot(cricket, aes(Success_Pre))
#now fill in the plot
crickethist +
geom_histogram(binwidth = 5,
color = "blue",
fill = "red") +
xlab("Success Pre Test") +
ylab("Frequency")
crickethist +
geom_histogram(binwidth = 5,
color = "green",
fill = "red") +
xlab("Success Pre Test") +
ylab("Frequency")
crickethist +
geom_histogram(binwidth = 5,
color = "green",
fill = "blue") +
xlab("Success Pre Test") +
ylab("Frequency")
source("cleanup.R")
crickethist +
geom_histogram(binwidth = 5,
color = "green",
fill = "blue") +
xlab("Success Pre Test") +
ylab("Frequency") +
cleanup
##import data for scatterplot
exam = read.csv("c4 Exam Anxiety.csv", header=TRUE)
##gender has to be factored before we can use it in our plot
exam$Gender = factor(exam$Gender,
levels = c(1,2),
labels = c("Male", "Female"))
####simple scatter plot####
##AES has X axis, Y axis
scatter = ggplot(exam, aes(Anxiety, Exam)) #first just set up a blank plot
scatter +
geom_point() +
xlab("Anxiety Score") +
ylab("Exam Score") +
cleanup
scatter +
geom_point() +
geom_smooth(method = "lm", color = "indianred4") +
xlab("Anxiety Score") +
ylab("Exam Score") +
cleanup
####simple scatter with regression line####
scatter +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "indianred4") +
xlab("Anxiety Score") +
ylab("Exam Score") +
cleanup
scatter2 = ggplot(exam, aes(Anxiety, Exam, color = Gender, fill = Gender))
scatter2 +
geom_point() +
geom_smooth(method = "lm") +
xlab("Anxiety Score") +
ylab("Exam Score") +
cleanup +
scale_fill_manual(name = "Gender of Participant",
labels = c("Men", "Women"),
values = c("red", "green")) +
scale_color_manual(name = "Gender of Participant",
labels = c("Men", "Women"),
values = c("indianred4", "dodgerblue"))
scatter2 +
geom_point() +
geom_smooth(method = "lm") +
xlab("Anxiety Score") +
ylab("Exam Score") +
cleanup +
scale_fill_manual(name = "Gender of Participant",
labels = c("Men", "Women"),
values = c("red", "dodgerblue")) +
scale_color_manual(name = "Gender of Participant",
labels = c("Men", "Women"),
values = c("red", "dodgerblue"))
scatter2 +
geom_point() +
geom_smooth(method = "lm") +
xlab("Anxiety Score") +
ylab("Exam Score") +
cleanup +
scale_fill_manual(name = "Gender of Participant",
labels = c("Men", "Women"),
values = c("green", "dodgerblue")) +
scale_color_manual(name = "Gender of Participant",
labels = c("Men", "Women"),
values = c("red", "dodgerblue"))
scatter2 +
geom_point() +
geom_smooth(method = "lm") +
xlab("Anxiety Score") +
ylab("Exam Score") +
cleanup +
#scale_fill_manual(name = "Gender of Participant",
#                 labels = c("Men", "Women"),
#                  values = c("green", "dodgerblue")) +
scale_color_manual(name = "Gender of Participant",
labels = c("Men", "Women"),
values = c("red", "dodgerblue"))
####Bar Charts Start here!####
chick = chickdata
View(chick)
chickbar = ggplot(chickdata, aes(film, arousal))
chickbar +
stat_summary(fun.y = mean,
geom = "bar",
fill = "White",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
width = .2,
position = "dodge") +
cleanup +
xlab("Movie Watched by Participants") +
ylab("Arousal Level") +
scale_x_discrete(labels = c("Girl Film", "Guy Film"))
install.packages("Hmisc")
chickbar = ggplot(chickdata, aes(film, arousal))
chickbar +
stat_summary(fun.y = mean,
geom = "bar",
fill = "White",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
width = .2,
position = "dodge") +
cleanup +
xlab("Movie Watched by Participants") +
ylab("Arousal Level") +
scale_x_discrete(labels = c("Girl Film", "Guy Film"))
chickbar = ggplot(chickdata, aes(film, arousal))
chickbar +
stat_summary(fun.y = mean,
geom = "bar",
fill = "White",
color = "Black") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
width = .2,
position = "dodge") +
cleanup +
xlab("Movie Watched by Participants") +
ylab("Arousal Level") +
scale_x_discrete(labels = c("Girl Film", "Guy Film"))
####bar chart two independent variables####
##AES has X axis (categorical), Y axis (continuous), fill legend (categorical)
chickbar2 = ggplot(chickdata, aes(film, arousal, fill = gender))
chickbar2 +
stat_summary(fun.y = mean,
geom = "bar",
position = "dodge") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
position = position_dodge(width = 0.90),
width = .2) +
xlab("Film Watched") +
ylab("Arousal Level") +
cleanup +
scale_fill_manual(name = "Gender of Participant",
labels = c("Boys", "Girls"),
values = c("indianred4", "Gray"))
chickbar2 +
stat_summary(fun.y = mean,
geom = "bar",
position = "dodge") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
position = position_dodge(width = 0.90),
width = .2) +
xlab("Film Watched") +
ylab("Arousal Level") +
cleanup +
scale_fill_manual(name = "Gender of Participant",
labels = c("Boys", "Girls"),
values = c("cadeblue4", "Gray"))
chickbar2 +
stat_summary(fun.y = mean,
geom = "bar",
position = "dodge") +
stat_summary(fun.data = mean_cl_normal,
geom = "errorbar",
position = position_dodge(width = 0.90),
width = .2) +
xlab("Film Watched") +
ylab("Arousal Level") +
cleanup +
scale_fill_manual(name = "Gender of Participant",
labels = c("Boys", "Girls"),
values = c("cadetblue4", "Gray"))
